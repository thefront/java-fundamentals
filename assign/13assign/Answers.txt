1) List all the examples of polymorphism that you can find. That is to
say, statements where the datatype of a reference is not an exact match
with the datatype of the object that it refers to.

ANSWER:  I do not see any examples in the code.

2) In the containsPoint method of MyCircle, why are x and y in scope,
even though they are not defined as instance variables in MyCircle.java?

ANSWER: The x and y values are declared in the GridItem class as "protected".
        This means that any subClass like MyCircle inherits the protected fields
        variables. The MyCircle subclass extends GridItem.


3) Put a System.out.println statement into each containsPoint method
(GridItem, MyCircle, and MyRectangle). Run the program and examine the
output. You will notice that GridItem’s containsPoint method is never
called. Why is this?

ANSWER: The GridItem method never gets called because MyCircle and My Rectangle
        have an overriding method in the subclass.


4) Notice that x and y are declared as ‘protected’ in GridItem. Change
this to ‘private’ and recompile. How does the compiler respond?

ANSWER: The compiler runs fine. But when you run the demo program it returns an
        exception where it states that it tried to access the x field from the
        subClass, MyCircle, but we run into a java.lang.IllegalAccessError.


5) How could Abstract Methods have been used to make the code cleaner?

ANSWER: You could use Abstract method


6) How might an Interface have been used to structure the classes?

ANSWER:
